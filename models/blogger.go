// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Blogger is an object representing the database table.
type Blogger struct {
	Index    int         `boil:"index" json:"index" toml:"index" yaml:"index"`
	ID       string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Nick     null.String `boil:"nick" json:"nick,omitempty" toml:"nick" yaml:"nick,omitempty"`
	DOB      time.Time   `boil:"DOB" json:"DOB" toml:"DOB" yaml:"DOB"`
	Blogname string      `boil:"blogname" json:"blogname" toml:"blogname" yaml:"blogname"`
	Blogskin int         `boil:"blogskin" json:"blogskin" toml:"blogskin" yaml:"blogskin"`
	Email    string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Visitor  int         `boil:"visitor" json:"visitor" toml:"visitor" yaml:"visitor"`
	Intro    null.String `boil:"intro" json:"intro,omitempty" toml:"intro" yaml:"intro,omitempty"`
	Blogs    int         `boil:"blogs" json:"blogs" toml:"blogs" yaml:"blogs"`
	IP       null.String `boil:"IP" json:"IP,omitempty" toml:"IP" yaml:"IP,omitempty"`
	TS       bool        `boil:"TS" json:"TS" toml:"TS" yaml:"TS"`
	LastLog  time.Time   `boil:"Last_log" json:"Last_log" toml:"Last_log" yaml:"Last_log"`
	LastPost null.Time   `boil:"Last_post" json:"Last_post,omitempty" toml:"Last_post" yaml:"Last_post,omitempty"`
	Activate bool        `boil:"Activate" json:"Activate" toml:"Activate" yaml:"Activate"`
	Reveal   bool        `boil:"Reveal" json:"Reveal" toml:"Reveal" yaml:"Reveal"`
	Userpic  int         `boil:"userpic" json:"userpic" toml:"userpic" yaml:"userpic"`
	Lang     string      `boil:"lang" json:"lang" toml:"lang" yaml:"lang"`
	Widget   null.String `boil:"widget" json:"widget,omitempty" toml:"widget" yaml:"widget,omitempty"`

	R *bloggerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bloggerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BloggerColumns = struct {
	Index    string
	ID       string
	Nick     string
	DOB      string
	Blogname string
	Blogskin string
	Email    string
	Visitor  string
	Intro    string
	Blogs    string
	IP       string
	TS       string
	LastLog  string
	LastPost string
	Activate string
	Reveal   string
	Userpic  string
	Lang     string
	Widget   string
}{
	Index:    "index",
	ID:       "id",
	Nick:     "nick",
	DOB:      "DOB",
	Blogname: "blogname",
	Blogskin: "blogskin",
	Email:    "email",
	Visitor:  "visitor",
	Intro:    "intro",
	Blogs:    "blogs",
	IP:       "IP",
	TS:       "TS",
	LastLog:  "Last_log",
	LastPost: "Last_post",
	Activate: "Activate",
	Reveal:   "Reveal",
	Userpic:  "userpic",
	Lang:     "lang",
	Widget:   "widget",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var BloggerWhere = struct {
	Index    whereHelperint
	ID       whereHelperstring
	Nick     whereHelpernull_String
	DOB      whereHelpertime_Time
	Blogname whereHelperstring
	Blogskin whereHelperint
	Email    whereHelperstring
	Visitor  whereHelperint
	Intro    whereHelpernull_String
	Blogs    whereHelperint
	IP       whereHelpernull_String
	TS       whereHelperbool
	LastLog  whereHelpertime_Time
	LastPost whereHelpernull_Time
	Activate whereHelperbool
	Reveal   whereHelperbool
	Userpic  whereHelperint
	Lang     whereHelperstring
	Widget   whereHelpernull_String
}{
	Index:    whereHelperint{field: "`blogger`.`index`"},
	ID:       whereHelperstring{field: "`blogger`.`id`"},
	Nick:     whereHelpernull_String{field: "`blogger`.`nick`"},
	DOB:      whereHelpertime_Time{field: "`blogger`.`DOB`"},
	Blogname: whereHelperstring{field: "`blogger`.`blogname`"},
	Blogskin: whereHelperint{field: "`blogger`.`blogskin`"},
	Email:    whereHelperstring{field: "`blogger`.`email`"},
	Visitor:  whereHelperint{field: "`blogger`.`visitor`"},
	Intro:    whereHelpernull_String{field: "`blogger`.`intro`"},
	Blogs:    whereHelperint{field: "`blogger`.`blogs`"},
	IP:       whereHelpernull_String{field: "`blogger`.`IP`"},
	TS:       whereHelperbool{field: "`blogger`.`TS`"},
	LastLog:  whereHelpertime_Time{field: "`blogger`.`Last_log`"},
	LastPost: whereHelpernull_Time{field: "`blogger`.`Last_post`"},
	Activate: whereHelperbool{field: "`blogger`.`Activate`"},
	Reveal:   whereHelperbool{field: "`blogger`.`Reveal`"},
	Userpic:  whereHelperint{field: "`blogger`.`userpic`"},
	Lang:     whereHelperstring{field: "`blogger`.`lang`"},
	Widget:   whereHelpernull_String{field: "`blogger`.`widget`"},
}

// BloggerRels is where relationship names are stored.
var BloggerRels = struct {
}{}

// bloggerR is where relationships are stored.
type bloggerR struct {
}

// NewStruct creates a new relationship struct
func (*bloggerR) NewStruct() *bloggerR {
	return &bloggerR{}
}

// bloggerL is where Load methods for each relationship are stored.
type bloggerL struct{}

var (
	bloggerAllColumns            = []string{"index", "id", "nick", "DOB", "blogname", "blogskin", "email", "visitor", "intro", "blogs", "IP", "TS", "Last_log", "Last_post", "Activate", "Reveal", "userpic", "lang", "widget"}
	bloggerColumnsWithoutDefault = []string{"id", "nick", "DOB", "blogname", "blogskin", "email", "intro", "IP", "Last_post", "widget"}
	bloggerColumnsWithDefault    = []string{"index", "visitor", "blogs", "TS", "Last_log", "Activate", "Reveal", "userpic", "lang"}
	bloggerPrimaryKeyColumns     = []string{"index"}
)

type (
	// BloggerSlice is an alias for a slice of pointers to Blogger.
	// This should generally be used opposed to []Blogger.
	BloggerSlice []*Blogger
	// BloggerHook is the signature for custom Blogger hook methods
	BloggerHook func(boil.Executor, *Blogger) error

	bloggerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bloggerType                 = reflect.TypeOf(&Blogger{})
	bloggerMapping              = queries.MakeStructMapping(bloggerType)
	bloggerPrimaryKeyMapping, _ = queries.BindMapping(bloggerType, bloggerMapping, bloggerPrimaryKeyColumns)
	bloggerInsertCacheMut       sync.RWMutex
	bloggerInsertCache          = make(map[string]insertCache)
	bloggerUpdateCacheMut       sync.RWMutex
	bloggerUpdateCache          = make(map[string]updateCache)
	bloggerUpsertCacheMut       sync.RWMutex
	bloggerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bloggerBeforeInsertHooks []BloggerHook
var bloggerBeforeUpdateHooks []BloggerHook
var bloggerBeforeDeleteHooks []BloggerHook
var bloggerBeforeUpsertHooks []BloggerHook

var bloggerAfterInsertHooks []BloggerHook
var bloggerAfterSelectHooks []BloggerHook
var bloggerAfterUpdateHooks []BloggerHook
var bloggerAfterDeleteHooks []BloggerHook
var bloggerAfterUpsertHooks []BloggerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Blogger) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Blogger) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Blogger) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Blogger) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Blogger) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Blogger) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Blogger) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Blogger) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Blogger) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range bloggerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBloggerHook registers your hook function for all future operations.
func AddBloggerHook(hookPoint boil.HookPoint, bloggerHook BloggerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bloggerBeforeInsertHooks = append(bloggerBeforeInsertHooks, bloggerHook)
	case boil.BeforeUpdateHook:
		bloggerBeforeUpdateHooks = append(bloggerBeforeUpdateHooks, bloggerHook)
	case boil.BeforeDeleteHook:
		bloggerBeforeDeleteHooks = append(bloggerBeforeDeleteHooks, bloggerHook)
	case boil.BeforeUpsertHook:
		bloggerBeforeUpsertHooks = append(bloggerBeforeUpsertHooks, bloggerHook)
	case boil.AfterInsertHook:
		bloggerAfterInsertHooks = append(bloggerAfterInsertHooks, bloggerHook)
	case boil.AfterSelectHook:
		bloggerAfterSelectHooks = append(bloggerAfterSelectHooks, bloggerHook)
	case boil.AfterUpdateHook:
		bloggerAfterUpdateHooks = append(bloggerAfterUpdateHooks, bloggerHook)
	case boil.AfterDeleteHook:
		bloggerAfterDeleteHooks = append(bloggerAfterDeleteHooks, bloggerHook)
	case boil.AfterUpsertHook:
		bloggerAfterUpsertHooks = append(bloggerAfterUpsertHooks, bloggerHook)
	}
}

// OneG returns a single blogger record from the query using the global executor.
func (q bloggerQuery) OneG() (*Blogger, error) {
	return q.One(boil.GetDB())
}

// One returns a single blogger record from the query.
func (q bloggerQuery) One(exec boil.Executor) (*Blogger, error) {
	o := &Blogger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for blogger")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Blogger records from the query using the global executor.
func (q bloggerQuery) AllG() (BloggerSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Blogger records from the query.
func (q bloggerQuery) All(exec boil.Executor) (BloggerSlice, error) {
	var o []*Blogger

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Blogger slice")
	}

	if len(bloggerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Blogger records in the query, and panics on error.
func (q bloggerQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Blogger records in the query.
func (q bloggerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count blogger rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q bloggerQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q bloggerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if blogger exists")
	}

	return count > 0, nil
}

// Bloggers retrieves all the records using an executor.
func Bloggers(mods ...qm.QueryMod) bloggerQuery {
	mods = append(mods, qm.From("`blogger`"))
	return bloggerQuery{NewQuery(mods...)}
}

// FindBloggerG retrieves a single record by ID.
func FindBloggerG(index int, selectCols ...string) (*Blogger, error) {
	return FindBlogger(boil.GetDB(), index, selectCols...)
}

// FindBlogger retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlogger(exec boil.Executor, index int, selectCols ...string) (*Blogger, error) {
	bloggerObj := &Blogger{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blogger` where `index`=?", sel,
	)

	q := queries.Raw(query, index)

	err := q.Bind(nil, exec, bloggerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from blogger")
	}

	return bloggerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Blogger) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Blogger) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blogger provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bloggerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bloggerInsertCacheMut.RLock()
	cache, cached := bloggerInsertCache[key]
	bloggerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bloggerAllColumns,
			bloggerColumnsWithDefault,
			bloggerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bloggerType, bloggerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bloggerType, bloggerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `blogger` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `blogger` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blogger` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bloggerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into blogger")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Index = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bloggerMapping["index"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Index,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for blogger")
	}

CacheNoHooks:
	if !cached {
		bloggerInsertCacheMut.Lock()
		bloggerInsertCache[key] = cache
		bloggerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Blogger record using the global executor.
// See Update for more documentation.
func (o *Blogger) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Blogger.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Blogger) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bloggerUpdateCacheMut.RLock()
	cache, cached := bloggerUpdateCache[key]
	bloggerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bloggerAllColumns,
			bloggerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update blogger, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blogger` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bloggerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bloggerType, bloggerMapping, append(wl, bloggerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update blogger row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for blogger")
	}

	if !cached {
		bloggerUpdateCacheMut.Lock()
		bloggerUpdateCache[key] = cache
		bloggerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q bloggerQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bloggerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for blogger")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for blogger")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BloggerSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BloggerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bloggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blogger` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bloggerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in blogger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all blogger")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Blogger) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLBloggerUniqueColumns = []string{
	"index",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Blogger) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blogger provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bloggerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBloggerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bloggerUpsertCacheMut.RLock()
	cache, cached := bloggerUpsertCache[key]
	bloggerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bloggerAllColumns,
			bloggerColumnsWithDefault,
			bloggerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bloggerAllColumns,
			bloggerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert blogger, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "blogger", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blogger` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bloggerType, bloggerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bloggerType, bloggerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for blogger")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.Index = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bloggerMapping["index"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bloggerType, bloggerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for blogger")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for blogger")
	}

CacheNoHooks:
	if !cached {
		bloggerUpsertCacheMut.Lock()
		bloggerUpsertCache[key] = cache
		bloggerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Blogger record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Blogger) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Blogger record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Blogger) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Blogger provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bloggerPrimaryKeyMapping)
	sql := "DELETE FROM `blogger` WHERE `index`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from blogger")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for blogger")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bloggerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bloggerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from blogger")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blogger")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BloggerSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BloggerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bloggerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bloggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blogger` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bloggerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from blogger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blogger")
	}

	if len(bloggerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Blogger) ReloadG() error {
	if o == nil {
		return errors.New("models: no Blogger provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Blogger) Reload(exec boil.Executor) error {
	ret, err := FindBlogger(exec, o.Index)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BloggerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BloggerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BloggerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BloggerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bloggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blogger`.* FROM `blogger` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bloggerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BloggerSlice")
	}

	*o = slice

	return nil
}

// BloggerExistsG checks if the Blogger row exists.
func BloggerExistsG(index int) (bool, error) {
	return BloggerExists(boil.GetDB(), index)
}

// BloggerExists checks if the Blogger row exists.
func BloggerExists(exec boil.Executor, index int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blogger` where `index`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, index)
	}
	row := exec.QueryRow(sql, index)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if blogger exists")
	}

	return exists, nil
}
