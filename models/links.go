// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Link is an object representing the database table.
type Link struct {
	ID      int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Blogger int    `boil:"blogger" json:"blogger" toml:"blogger" yaml:"blogger"`
	Link    string `boil:"link" json:"link" toml:"link" yaml:"link"`
	URL     string `boil:"URL" json:"URL" toml:"URL" yaml:"URL"`
	Reveal  bool   `boil:"reveal" json:"reveal" toml:"reveal" yaml:"reveal"`

	R *linkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L linkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LinkColumns = struct {
	ID      string
	Blogger string
	Link    string
	URL     string
	Reveal  string
}{
	ID:      "id",
	Blogger: "blogger",
	Link:    "link",
	URL:     "URL",
	Reveal:  "reveal",
}

// Generated where

var LinkWhere = struct {
	ID      whereHelperint
	Blogger whereHelperint
	Link    whereHelperstring
	URL     whereHelperstring
	Reveal  whereHelperbool
}{
	ID:      whereHelperint{field: "`links`.`id`"},
	Blogger: whereHelperint{field: "`links`.`blogger`"},
	Link:    whereHelperstring{field: "`links`.`link`"},
	URL:     whereHelperstring{field: "`links`.`URL`"},
	Reveal:  whereHelperbool{field: "`links`.`reveal`"},
}

// LinkRels is where relationship names are stored.
var LinkRels = struct {
}{}

// linkR is where relationships are stored.
type linkR struct {
}

// NewStruct creates a new relationship struct
func (*linkR) NewStruct() *linkR {
	return &linkR{}
}

// linkL is where Load methods for each relationship are stored.
type linkL struct{}

var (
	linkAllColumns            = []string{"id", "blogger", "link", "URL", "reveal"}
	linkColumnsWithoutDefault = []string{"blogger", "link", "URL"}
	linkColumnsWithDefault    = []string{"id", "reveal"}
	linkPrimaryKeyColumns     = []string{"id"}
)

type (
	// LinkSlice is an alias for a slice of pointers to Link.
	// This should generally be used opposed to []Link.
	LinkSlice []*Link
	// LinkHook is the signature for custom Link hook methods
	LinkHook func(boil.Executor, *Link) error

	linkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	linkType                 = reflect.TypeOf(&Link{})
	linkMapping              = queries.MakeStructMapping(linkType)
	linkPrimaryKeyMapping, _ = queries.BindMapping(linkType, linkMapping, linkPrimaryKeyColumns)
	linkInsertCacheMut       sync.RWMutex
	linkInsertCache          = make(map[string]insertCache)
	linkUpdateCacheMut       sync.RWMutex
	linkUpdateCache          = make(map[string]updateCache)
	linkUpsertCacheMut       sync.RWMutex
	linkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var linkBeforeInsertHooks []LinkHook
var linkBeforeUpdateHooks []LinkHook
var linkBeforeDeleteHooks []LinkHook
var linkBeforeUpsertHooks []LinkHook

var linkAfterInsertHooks []LinkHook
var linkAfterSelectHooks []LinkHook
var linkAfterUpdateHooks []LinkHook
var linkAfterDeleteHooks []LinkHook
var linkAfterUpsertHooks []LinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Link) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range linkBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Link) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range linkBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Link) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range linkBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Link) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range linkBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Link) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range linkAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Link) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range linkAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Link) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range linkAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Link) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range linkAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Link) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range linkAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLinkHook registers your hook function for all future operations.
func AddLinkHook(hookPoint boil.HookPoint, linkHook LinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		linkBeforeInsertHooks = append(linkBeforeInsertHooks, linkHook)
	case boil.BeforeUpdateHook:
		linkBeforeUpdateHooks = append(linkBeforeUpdateHooks, linkHook)
	case boil.BeforeDeleteHook:
		linkBeforeDeleteHooks = append(linkBeforeDeleteHooks, linkHook)
	case boil.BeforeUpsertHook:
		linkBeforeUpsertHooks = append(linkBeforeUpsertHooks, linkHook)
	case boil.AfterInsertHook:
		linkAfterInsertHooks = append(linkAfterInsertHooks, linkHook)
	case boil.AfterSelectHook:
		linkAfterSelectHooks = append(linkAfterSelectHooks, linkHook)
	case boil.AfterUpdateHook:
		linkAfterUpdateHooks = append(linkAfterUpdateHooks, linkHook)
	case boil.AfterDeleteHook:
		linkAfterDeleteHooks = append(linkAfterDeleteHooks, linkHook)
	case boil.AfterUpsertHook:
		linkAfterUpsertHooks = append(linkAfterUpsertHooks, linkHook)
	}
}

// OneG returns a single link record from the query using the global executor.
func (q linkQuery) OneG() (*Link, error) {
	return q.One(boil.GetDB())
}

// One returns a single link record from the query.
func (q linkQuery) One(exec boil.Executor) (*Link, error) {
	o := &Link{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for links")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Link records from the query using the global executor.
func (q linkQuery) AllG() (LinkSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Link records from the query.
func (q linkQuery) All(exec boil.Executor) (LinkSlice, error) {
	var o []*Link

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Link slice")
	}

	if len(linkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Link records in the query, and panics on error.
func (q linkQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Link records in the query.
func (q linkQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count links rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q linkQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q linkQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if links exists")
	}

	return count > 0, nil
}

// Links retrieves all the records using an executor.
func Links(mods ...qm.QueryMod) linkQuery {
	mods = append(mods, qm.From("`links`"))
	return linkQuery{NewQuery(mods...)}
}

// FindLinkG retrieves a single record by ID.
func FindLinkG(iD int, selectCols ...string) (*Link, error) {
	return FindLink(boil.GetDB(), iD, selectCols...)
}

// FindLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLink(exec boil.Executor, iD int, selectCols ...string) (*Link, error) {
	linkObj := &Link{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `links` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, linkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from links")
	}

	return linkObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Link) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Link) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no links provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(linkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	linkInsertCacheMut.RLock()
	cache, cached := linkInsertCache[key]
	linkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			linkAllColumns,
			linkColumnsWithDefault,
			linkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(linkType, linkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(linkType, linkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `links` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `links` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `links` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, linkPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into links")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == linkMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for links")
	}

CacheNoHooks:
	if !cached {
		linkInsertCacheMut.Lock()
		linkInsertCache[key] = cache
		linkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Link record using the global executor.
// See Update for more documentation.
func (o *Link) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Link.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Link) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	linkUpdateCacheMut.RLock()
	cache, cached := linkUpdateCache[key]
	linkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			linkAllColumns,
			linkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `links` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, linkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(linkType, linkMapping, append(wl, linkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update links row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for links")
	}

	if !cached {
		linkUpdateCacheMut.Lock()
		linkUpdateCache[key] = cache
		linkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q linkQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q linkQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for links")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o LinkSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LinkSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, linkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in link slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all link")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Link) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLLinkUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Link) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no links provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(linkColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLinkUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	linkUpsertCacheMut.RLock()
	cache, cached := linkUpsertCache[key]
	linkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			linkAllColumns,
			linkColumnsWithDefault,
			linkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			linkAllColumns,
			linkPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert links, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "links", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `links` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(linkType, linkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(linkType, linkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for links")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == linkMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(linkType, linkMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for links")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for links")
	}

CacheNoHooks:
	if !cached {
		linkUpsertCacheMut.Lock()
		linkUpsertCache[key] = cache
		linkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Link record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Link) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Link record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Link) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Link provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), linkPrimaryKeyMapping)
	sql := "DELETE FROM `links` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for links")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q linkQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no linkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for links")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o LinkSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LinkSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(linkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `links` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, linkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from link slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for links")
	}

	if len(linkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Link) ReloadG() error {
	if o == nil {
		return errors.New("models: no Link provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Link) Reload(exec boil.Executor) error {
	ret, err := FindLink(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LinkSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty LinkSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LinkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `links`.* FROM `links` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, linkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LinkSlice")
	}

	*o = slice

	return nil
}

// LinkExistsG checks if the Link row exists.
func LinkExistsG(iD int) (bool, error) {
	return LinkExists(boil.GetDB(), iD)
}

// LinkExists checks if the Link row exists.
func LinkExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `links` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if links exists")
	}

	return exists, nil
}
