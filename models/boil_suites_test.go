// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Articles", testArticles)
	t.Run("Bloggers", testBloggers)
	t.Run("Comments", testComments)
	t.Run("Links", testLinks)
	t.Run("Userdefinecategories", testUserdefinecategories)
}

func TestDelete(t *testing.T) {
	t.Run("Articles", testArticlesDelete)
	t.Run("Bloggers", testBloggersDelete)
	t.Run("Comments", testCommentsDelete)
	t.Run("Links", testLinksDelete)
	t.Run("Userdefinecategories", testUserdefinecategoriesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesQueryDeleteAll)
	t.Run("Bloggers", testBloggersQueryDeleteAll)
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Links", testLinksQueryDeleteAll)
	t.Run("Userdefinecategories", testUserdefinecategoriesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceDeleteAll)
	t.Run("Bloggers", testBloggersSliceDeleteAll)
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Links", testLinksSliceDeleteAll)
	t.Run("Userdefinecategories", testUserdefinecategoriesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Articles", testArticlesExists)
	t.Run("Bloggers", testBloggersExists)
	t.Run("Comments", testCommentsExists)
	t.Run("Links", testLinksExists)
	t.Run("Userdefinecategories", testUserdefinecategoriesExists)
}

func TestFind(t *testing.T) {
	t.Run("Articles", testArticlesFind)
	t.Run("Bloggers", testBloggersFind)
	t.Run("Comments", testCommentsFind)
	t.Run("Links", testLinksFind)
	t.Run("Userdefinecategories", testUserdefinecategoriesFind)
}

func TestBind(t *testing.T) {
	t.Run("Articles", testArticlesBind)
	t.Run("Bloggers", testBloggersBind)
	t.Run("Comments", testCommentsBind)
	t.Run("Links", testLinksBind)
	t.Run("Userdefinecategories", testUserdefinecategoriesBind)
}

func TestOne(t *testing.T) {
	t.Run("Articles", testArticlesOne)
	t.Run("Bloggers", testBloggersOne)
	t.Run("Comments", testCommentsOne)
	t.Run("Links", testLinksOne)
	t.Run("Userdefinecategories", testUserdefinecategoriesOne)
}

func TestAll(t *testing.T) {
	t.Run("Articles", testArticlesAll)
	t.Run("Bloggers", testBloggersAll)
	t.Run("Comments", testCommentsAll)
	t.Run("Links", testLinksAll)
	t.Run("Userdefinecategories", testUserdefinecategoriesAll)
}

func TestCount(t *testing.T) {
	t.Run("Articles", testArticlesCount)
	t.Run("Bloggers", testBloggersCount)
	t.Run("Comments", testCommentsCount)
	t.Run("Links", testLinksCount)
	t.Run("Userdefinecategories", testUserdefinecategoriesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Articles", testArticlesHooks)
	t.Run("Bloggers", testBloggersHooks)
	t.Run("Comments", testCommentsHooks)
	t.Run("Links", testLinksHooks)
	t.Run("Userdefinecategories", testUserdefinecategoriesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Articles", testArticlesInsert)
	t.Run("Articles", testArticlesInsertWhitelist)
	t.Run("Bloggers", testBloggersInsert)
	t.Run("Bloggers", testBloggersInsertWhitelist)
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Links", testLinksInsert)
	t.Run("Links", testLinksInsertWhitelist)
	t.Run("Userdefinecategories", testUserdefinecategoriesInsert)
	t.Run("Userdefinecategories", testUserdefinecategoriesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Articles", testArticlesReload)
	t.Run("Bloggers", testBloggersReload)
	t.Run("Comments", testCommentsReload)
	t.Run("Links", testLinksReload)
	t.Run("Userdefinecategories", testUserdefinecategoriesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Articles", testArticlesReloadAll)
	t.Run("Bloggers", testBloggersReloadAll)
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Links", testLinksReloadAll)
	t.Run("Userdefinecategories", testUserdefinecategoriesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Articles", testArticlesSelect)
	t.Run("Bloggers", testBloggersSelect)
	t.Run("Comments", testCommentsSelect)
	t.Run("Links", testLinksSelect)
	t.Run("Userdefinecategories", testUserdefinecategoriesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Articles", testArticlesUpdate)
	t.Run("Bloggers", testBloggersUpdate)
	t.Run("Comments", testCommentsUpdate)
	t.Run("Links", testLinksUpdate)
	t.Run("Userdefinecategories", testUserdefinecategoriesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceUpdateAll)
	t.Run("Bloggers", testBloggersSliceUpdateAll)
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Links", testLinksSliceUpdateAll)
	t.Run("Userdefinecategories", testUserdefinecategoriesSliceUpdateAll)
}
