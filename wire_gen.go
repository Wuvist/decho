// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/Wuvist/decho/controller"
	"github.com/Wuvist/decho/tpl"
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func getWebApp() (*WebApp, error) {
	echoEcho := echo.New()
	config, err := loadTomlConf()
	if err != nil {
		return nil, err
	}
	bloggerQuery := getBloggerDB()
	articlesQuery := getArticalDB()
	commentQuery := getCommentDB()
	userdefinecategoryQuery := getCategoryDB()
	linkQuery := getLinkDB()
	viewModel := &tpl.ViewModel{
		Articles: articlesQuery,
		Comments: commentQuery,
		Cates:    userdefinecategoryQuery,
		Links:    linkQuery,
	}
	blogController, err := controller.NewBlogController(echoEcho, bloggerQuery, articlesQuery, viewModel)
	if err != nil {
		return nil, err
	}
	cateController, err := controller.NewCateController(echoEcho, bloggerQuery, userdefinecategoryQuery, viewModel)
	if err != nil {
		return nil, err
	}
	homeController, err := controller.NewHomeController(echoEcho, bloggerQuery)
	if err != nil {
		return nil, err
	}
	staticController, err := controller.NewStaticController(echoEcho)
	if err != nil {
		return nil, err
	}
	webApp := &WebApp{
		Echo:   echoEcho,
		config: config,
		blog:   blogController,
		cate:   cateController,
		home:   homeController,
		static: staticController,
	}
	return webApp, nil
}

// wire.go:

var dbProviders = wire.NewSet(wire.Struct(new(tpl.ViewModel), "*"), getBloggerDB,
	getArticalDB,
	getCategoryDB,
	getCommentDB,
	getLinkDB,
)
